/**
 * All API
 * TODO: Add Description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { AddTicketRequest } from '../model/add-ticket-request';
import { AddUserRequest } from '../model/add-user-request';
import { GenerateTicketDefenseRequest } from '../model/generate-ticket-defense-request';
import { GetAuthorizationTokenRequest } from '../model/get-authorization-token-request';
import { UpdateCustomerProfileRequest } from '../model/update-customer-profile-request';
import { UpdateTicketRequest } from '../model/update-ticket-request';
import { UploadTicketDocumentRequest } from '../model/upload-ticket-document-request';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';
import { logZARequests } from '../../../helpers/decorators';
import { LoggerService } from '@logger';
import { LogChannel } from '../../../config/logs';

let defaultBasePath = 'http://example.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MiscApiApiKeys {}

export class MiscApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    private logger = new LoggerService();

    protected authentications = {
        default: <Authentication>new VoidAuth(),
    };

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: MiscApiApiKeys, value: string) {
        (this.authentications as any)[MiscApiApiKeys[key]].apiKey = value;
    }

    /**
     * TODO: Add Description
     * @summary AddLeadTicket
     * @param contentType
     * @param firstName
     * @param lastName
     * @param mobile
     * @param ticketSystem
     */
    @logZARequests
    public async addLeadTicket(
        contentType: string,
        firstName: string,
        lastName: string,
        mobile: string,
        ticketSystem: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/OldPublic/addLeadTicket';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.addLeadTicket.name}`, this.addLeadTicket.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling addLeadTicket.');
        }

        // verify required parameter 'firstName' is not null or undefined
        if (firstName === null || firstName === undefined) {
            throw new Error('Required parameter firstName was null or undefined when calling addLeadTicket.');
        }

        // verify required parameter 'lastName' is not null or undefined
        if (lastName === null || lastName === undefined) {
            throw new Error('Required parameter lastName was null or undefined when calling addLeadTicket.');
        }

        // verify required parameter 'mobile' is not null or undefined
        if (mobile === null || mobile === undefined) {
            throw new Error('Required parameter mobile was null or undefined when calling addLeadTicket.');
        }

        // verify required parameter 'ticketSystem' is not null or undefined
        if (ticketSystem === null || ticketSystem === undefined) {
            throw new Error('Required parameter ticketSystem was null or undefined when calling addLeadTicket.');
        }

        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, 'string');
        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        if (firstName !== undefined) {
            localVarFormParams['firstName'] = ObjectSerializer.serialize(firstName, 'string');
        }

        if (lastName !== undefined) {
            localVarFormParams['lastName'] = ObjectSerializer.serialize(lastName, 'string');
        }

        if (mobile !== undefined) {
            localVarFormParams['mobile'] = ObjectSerializer.serialize(mobile, 'string');
        }

        if (ticketSystem !== undefined) {
            localVarFormParams['ticketSystem'] = ObjectSerializer.serialize(ticketSystem, 'string');
        }

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.addLeadTicket.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.addLeadTicket.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.addLeadTicket.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary AddTicket
     * @param addTicketRequest
     */
    @logZARequests
    public async addTicket(
        addTicketRequest: Partial<AddTicketRequest>,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/OldTicket/addTicket';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.addTicket.name}`, this.addTicket.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'addTicketRequest' is not null or undefined
        if (addTicketRequest === null || addTicketRequest === undefined) {
            throw new Error('Required parameter addTicketRequest was null or undefined when calling addTicket.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addTicketRequest, 'AddTicketRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.addTicket.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.addTicket.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.addTicket.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary AddUser
     * @param addUserRequest
     */
    @logZARequests
    public async addUser(
        addUserRequest: Partial<AddUserRequest>,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/oldPublic/addUser';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.addUser.name}`, this.addUser.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'addUserRequest' is not null or undefined
        if (addUserRequest === null || addUserRequest === undefined) {
            throw new Error('Required parameter addUserRequest was null or undefined when calling addUser.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addUserRequest, 'AddUserRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.addUser.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.addUser.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.addUser.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary deleteCustomers
     * @param xAuthToken
     * @param requestBody
     */
    @logZARequests
    public async deleteCustomers(
        xAuthToken: string,
        requestBody: Array<number>,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Customer/deleteCustomers';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.deleteCustomers.name}`, this.deleteCustomers.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'xAuthToken' is not null or undefined
        if (xAuthToken === null || xAuthToken === undefined) {
            throw new Error('Required parameter xAuthToken was null or undefined when calling deleteCustomers.');
        }

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling deleteCustomers.');
        }

        localVarHeaderParams['X-Auth-Token'] = ObjectSerializer.serialize(xAuthToken, 'string');
        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, 'Array<number>'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.deleteCustomers.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.deleteCustomers.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.deleteCustomers.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary deleteTicketDocumentsByDocumentId
     * @param documentId
     * @param xAuthToken
     */
    @logZARequests
    public async deleteTicketDocumentsByDocumentId(
        documentId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/deleteTicketDocumentsByDocumentId';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.deleteTicketDocumentsByDocumentId.name}`,
            this.deleteTicketDocumentsByDocumentId.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'documentId' is not null or undefined
        if (documentId === null || documentId === undefined) {
            throw new Error(
                'Required parameter documentId was null or undefined when calling deleteTicketDocumentsByDocumentId.',
            );
        }

        if (documentId !== undefined) {
            localVarQueryParameters['documentId'] = ObjectSerializer.serialize(documentId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.deleteTicketDocumentsByDocumentId.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.deleteTicketDocumentsByDocumentId.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.deleteTicketDocumentsByDocumentId.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary deleteTickets
     * @param xAuthToken
     * @param requestBody
     */
    @logZARequests
    public async deleteTickets(
        requestBody: Array<number>,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/deleteTickets';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.deleteTickets.name}`, this.deleteTickets.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling deleteTickets.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, 'Array<number>'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.deleteTickets.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.deleteTickets.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.deleteTickets.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * generateTicketDefense
     * @summary generateTicketDefense
     * @param generateTicketDefenseRequest
     */
    @logZARequests
    public async generateTicketDefense(
        generateTicketDefenseRequest: GenerateTicketDefenseRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/generateTicketDefense';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.generateTicketDefense.name}`,
            this.generateTicketDefense.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
                body: ObjectSerializer.serialize(generateTicketDefenseRequest, 'GenerateTicketDefenseRequest')
            },
        );

        // verify required parameter 'generateTicketDefenseRequest' is not null or undefined
        if (generateTicketDefenseRequest === null || generateTicketDefenseRequest === undefined) {
            throw new Error(
                'Required parameter generateTicketDefenseRequest was null or undefined when calling generateTicketDefense.',
            );
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(generateTicketDefenseRequest, 'GenerateTicketDefenseRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.generateTicketDefense.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.generateTicketDefense.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.generateTicketDefense.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getAllTicketQuestionsAndAnswers
     * @param ticketId
     * @param xAuthToken
     */
    @logZARequests
    public async getAllTicketQuestionsAndAnswers(
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/getAllTicketQuestionsAndAnswers';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.getAllTicketQuestionsAndAnswers.name}`,
            this.getAllTicketQuestionsAndAnswers.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error(
                'Required parameter ticketId was null or undefined when calling getAllTicketQuestionsAndAnswers.',
            );
        }

        if (ticketId !== undefined) {
            localVarQueryParameters['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getAllTicketQuestionsAndAnswers.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getAllTicketQuestionsAndAnswers.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary GetAuthorizationToken
     * @param getAuthorizationTokenRequest
     */
    @logZARequests
    public async getAuthorizationToken(
        getAuthorizationTokenRequest: GetAuthorizationTokenRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/api/login';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.getAuthorizationToken.name}`,
            this.getAuthorizationToken.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'getAuthorizationTokenRequest' is not null or undefined
        if (getAuthorizationTokenRequest === null || getAuthorizationTokenRequest === undefined) {
            throw new Error(
                'Required parameter getAuthorizationTokenRequest was null or undefined when calling getAuthorizationToken.',
            );
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(getAuthorizationTokenRequest, 'GetAuthorizationTokenRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getAuthorizationToken.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getAuthorizationToken.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getAuthorizationToken.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getCourthouseList
     * @param offset
     * @param totalInstitutes25
     */
    @logZARequests
    public async getCourthouseList(
        offset: number,
        totalInstitutes25: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Public/getCourthouseList';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getCourthouseList.name}`, this.getCourthouseList.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getCourthouseList.');
        }

        // verify required parameter 'totalInstitutes25' is not null or undefined
        if (totalInstitutes25 === null || totalInstitutes25 === undefined) {
            throw new Error(
                'Required parameter totalInstitutes25 was null or undefined when calling getCourthouseList.',
            );
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, 'number');
        }

        if (totalInstitutes25 !== undefined) {
            localVarQueryParameters['totalInstitutes25'] = ObjectSerializer.serialize(totalInstitutes25, 'string');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getCourthouseList.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getCourthouseList.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getCustomer
     * @param username
     * @param ticketSystem
     */
    @logZARequests
    public async getCustomer(
        username: string,
        ticketSystem: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/oldCustomer/getCustomer';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getCustomer.name}`, this.getCustomer.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getCustomer.');
        }

        // verify required parameter 'ticketSystem' is not null or undefined
        if (ticketSystem === null || ticketSystem === undefined) {
            throw new Error('Required parameter ticketSystem was null or undefined when calling getCustomer.');
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, 'string');
        }

        if (ticketSystem !== undefined) {
            localVarQueryParameters['ticketSystem'] = ObjectSerializer.serialize(ticketSystem, 'string');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getCustomer.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getCustomer.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getCustomer.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getCustomer2
     * @param customerId
     */
    @logZARequests
    public async getCustomer2(
        customerId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Customer/getCustomer';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getCustomer2.name}`, this.getCustomer2.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomer2.');
        }

        if (customerId !== undefined) {
            localVarQueryParameters['customerId'] = ObjectSerializer.serialize(customerId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getCustomer2.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getCustomer2.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getCustomer2.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getTicket
     * @param ticketId
     */
    @logZARequests
    public async getTicket(
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/getTicket';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getTicket.name}`, this.getTicket.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling getTicket.');
        }

        if (ticketId !== undefined) {
            localVarQueryParameters['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getTicket.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getTicket.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getTicket.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * getTicketDefenceParagraphs
     * @summary getTicketDefenceParagraphs
     * @param ticketId
     */
    @logZARequests
    public async getTicketDefenceParagraphs(
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/getTicketDefenceParagraphs';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.getTicketDefenceParagraphs.name}`,
            this.getTicketDefenceParagraphs.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error(
                'Required parameter ticketId was null or undefined when calling getTicketDefenceParagraphs.',
            );
        }

        if (ticketId !== undefined) {
            localVarQueryParameters['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getTicketDefenceParagraphs.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getTicketDefenceParagraphs.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getTicketDefenceParagraphs.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getTicketDocumentTypeList
     * @param offset
     * @param totalInstitutes
     */
    @logZARequests
    public async getTicketDocumentTypeList(
        offset: number,
        totalInstitutes: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/getTicketDocumentTypeList';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.getTicketDocumentTypeList.name}`,
            this.getTicketDocumentTypeList.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getTicketDocumentTypeList.');
        }

        // verify required parameter 'totalInstitutes' is not null or undefined
        if (totalInstitutes === null || totalInstitutes === undefined) {
            throw new Error(
                'Required parameter totalInstitutes was null or undefined when calling getTicketDocumentTypeList.',
            );
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, 'number');
        }

        if (totalInstitutes !== undefined) {
            localVarQueryParameters['totalInstitutes'] = ObjectSerializer.serialize(totalInstitutes, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getTicketDocumentTypeList.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getTicketDocumentTypeList.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getTicketDocumentTypeList.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary GetTicketHistory
     * @param customerId
     * @param ticketSystem
     */
    @logZARequests
    public async getTicketHistory(
        customerId: number,
        ticketSystem: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/OldCustomer/getTicketHistory';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getTicketHistory.name}`, this.getTicketHistory.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getTicketHistory.');
        }

        // verify required parameter 'ticketSystem' is not null or undefined
        if (ticketSystem === null || ticketSystem === undefined) {
            throw new Error('Required parameter ticketSystem was null or undefined when calling getTicketHistory.');
        }

        if (customerId !== undefined) {
            localVarQueryParameters['customerId'] = ObjectSerializer.serialize(customerId, 'number');
        }

        if (ticketSystem !== undefined) {
            localVarQueryParameters['ticketSystem'] = ObjectSerializer.serialize(ticketSystem, 'string');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getTicketHistory.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.getTicketHistory.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getTicketHistory.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary getTicketStatusList
     * @param offset
     * @param totalInstitutes
     */
    @logZARequests
    public async getTicketStatusList(
        offset: number,
        totalInstitutes: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/getTicketStatusList';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.getTicketStatusList.name}`, this.getTicketStatusList.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getTicketStatusList.');
        }

        // verify required parameter 'totalInstitutes' is not null or undefined
        if (totalInstitutes === null || totalInstitutes === undefined) {
            throw new Error(
                'Required parameter totalInstitutes was null or undefined when calling getTicketStatusList.',
            );
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, 'number');
        }

        if (totalInstitutes !== undefined) {
            localVarQueryParameters['totalInstitutes'] = ObjectSerializer.serialize(totalInstitutes, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.getTicketStatusList.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.getTicketStatusList.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary listTicketsDocumentsByTicketId
     * @param ticketId
     */
    @logZARequests
    public async listTicketsDocumentsByTicketId(
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/listTicketsDocumentsByTicketId';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.listTicketsDocumentsByTicketId.name}`,
            this.listTicketsDocumentsByTicketId.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error(
                'Required parameter ticketId was null or undefined when calling listTicketsDocumentsByTicketId.',
            );
        }

        if (ticketId !== undefined) {
            localVarQueryParameters['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.listTicketsDocumentsByTicketId.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.listTicketsDocumentsByTicketId.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.listTicketsDocumentsByTicketId.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary produceAnswers
     * @param question
     * @param ticketId
     */
    @logZARequests
    public async produceAnswers(
        question: string,
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/OldTicket/produceAnswers';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.produceAnswers.name}`, this.produceAnswers.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'question' is not null or undefined
        if (question === null || question === undefined) {
            throw new Error('Required parameter question was null or undefined when calling produceAnswers.');
        }

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling produceAnswers.');
        }

        if (question !== undefined) {
            localVarQueryParameters['question'] = ObjectSerializer.serialize(question, 'string');
        }

        if (ticketId !== undefined) {
            localVarQueryParameters['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.produceAnswers.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.produceAnswers.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.produceAnswers.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary produceQuestion
     * @param contentType
     * @param violationId
     * @param direction
     * @param ticketId
     */
    @logZARequests
    public async produceQuestion(
        contentType: string,
        violationId: string,
        direction: string,
        ticketId: number,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/OldTicket/produceQuestion';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.produceQuestion.name}`, this.produceQuestion.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling produceQuestion.');
        }

        // verify required parameter 'violationId' is not null or undefined
        if (violationId === null || violationId === undefined) {
            throw new Error('Required parameter violationId was null or undefined when calling produceQuestion.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling produceQuestion.');
        }

        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling produceQuestion.');
        }

        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, 'string');
        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        if (violationId !== undefined) {
            localVarFormParams['violationId'] = ObjectSerializer.serialize(violationId, 'string');
        }

        if (direction !== undefined) {
            localVarFormParams['direction'] = ObjectSerializer.serialize(direction, 'string');
        }

        if (ticketId !== undefined) {
            localVarFormParams['ticketId'] = ObjectSerializer.serialize(ticketId, 'number');
        }

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.produceQuestion.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.produceQuestion.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.produceQuestion.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary updateCustomerProfile
     * @param updateCustomerProfileRequest
     */
    @logZARequests
    public async updateCustomerProfile(
        updateCustomerProfileRequest: UpdateCustomerProfileRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/oldCustomer/updateCustomerProfile';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(
            LogChannel.ZA,
            `Calling ${this.updateCustomerProfile.name}`,
            this.updateCustomerProfile.name,
            {
                localVarPath,
                localVarQueryParameters,
                localVarHeaderParams,
                localVarFormParams,
            },
        );

        // verify required parameter 'updateCustomerProfileRequest' is not null or undefined
        if (updateCustomerProfileRequest === null || updateCustomerProfileRequest === undefined) {
            throw new Error(
                'Required parameter updateCustomerProfileRequest was null or undefined when calling updateCustomerProfile.',
            );
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateCustomerProfileRequest, 'UpdateCustomerProfileRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.updateCustomerProfile.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.updateCustomerProfile.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.updateCustomerProfile.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary updateTicket
     * @param updateTicketRequest
     */
    @logZARequests
    public async updateTicket(
        updateTicketRequest: Partial<UpdateTicketRequest>,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/updateTicket';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.updateTicket.name}`, this.updateTicket.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'updateTicketRequest' is not null or undefined
        if (updateTicketRequest === null || updateTicketRequest === undefined) {
            throw new Error('Required parameter updateTicketRequest was null or undefined when calling updateTicket.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;
        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateTicketRequest, 'UpdateTicketRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.updateTicket.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.updateTicket.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.updateTicket.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Add Description
     * @summary uploadTicketDocument
     * @param uploadTicketDocumentRequest
     */
    @logZARequests
    public async uploadTicketDocument(
        uploadTicketDocumentRequest: UploadTicketDocumentRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body?: any }> {
        const localVarPath = this.basePath + '/Ticket/uploadTicketDocument';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        this.logger.debug(LogChannel.ZA, `Calling ${this.uploadTicketDocument.name}`, this.uploadTicketDocument.name, {
            localVarPath,
            localVarQueryParameters,
            localVarHeaderParams,
            localVarFormParams,
        });

        // verify required parameter 'uploadTicketDocumentRequest' is not null or undefined
        if (uploadTicketDocumentRequest === null || uploadTicketDocumentRequest === undefined) {
            throw new Error(
                'Required parameter uploadTicketDocumentRequest was null or undefined when calling uploadTicketDocument.',
            );
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(uploadTicketDocumentRequest, 'UploadTicketDocumentRequest'),
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (localVarRequestOptions as any).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        this.logger.error(
                            LogChannel.ZA,
                            'An error has occurred during the request',
                            this.uploadTicketDocument.name,
                            error,
                        );
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            this.logger.debug(
                                LogChannel.ZA,
                                'The ZA system returned the following successful response',
                                this.uploadTicketDocument.name,
                                body,
                            );
                            resolve({ response, body });
                        } else {
                            this.logger.error(
                                LogChannel.ZA,
                                'The ZA system returned the following error response',
                                this.uploadTicketDocument.name,
                                body,
                            );

                            reject({ response, body });
                        }
                    }
                });
            });
        });
    }
}
